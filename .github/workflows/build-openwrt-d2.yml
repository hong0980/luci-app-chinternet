#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: OpenWrt-newifi-d2-Lean

on:
#  push:
#   paths:
#     - 'd2'
#   schedule:
#     - cron: 0 19 * * *
#     - cron: 0 8 */3 * *
  watch:
    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: config-d2
  DIY_SH: diy-d2.sh
  FREE_UP_DISK: false
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: true
  UPLOAD_SQUASHFS_IMAGES: true
  TZ: Asia/Shanghai

jobs:
  build_openwrt:
    name: newifi-d2-Lean
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 当前github工作空间的项目
      uses: actions/checkout@v2
      with:
          ref: master

    - name: 初始环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h

    - name: 下载源码
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: 增加存储
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/build_dir/host openwrt/build_dir /mnt/openwrt/dl /mnt/openwrt/staging_dir
        ln -s /mnt/openwrt/build_dir/hostpkg openwrt/build_dir/hostpkg
        ln -s /mnt/openwrt/build_dir/host openwrt/build_dir/host
        ln -s /mnt/openwrt/dl openwrt/dl
        ln -s /mnt/openwrt/staging_dir openwrt/staging_dir

    - name: 导入自定义
      run: |
        git clone https://github.com/hong0980/diy openwrt/diy/hong0980
        mv openwrt/diy/hong0980/$CONFIG_FILE $(pwd)
        mv openwrt/diy/hong0980/$DIY_SH $(pwd)
        [ -d files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH && cd openwrt && ../$DIY_SH

    - name: SSH连接
      uses: garypang13/debugger-action@master
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: 下载软件包
      run: |
        cd openwrt && make defconfig && make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 固件编译
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/CONFIG_TARGET_(.*)_DEVICE.*/\1/' | awk -F_ '{print $1}' > TARGET
        [ -s TARGET ] && echo "TARGET=$(cat TARGET)" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/CONFIG_TARGET_(.*)_DEVICE.*/\1/' | awk -F_ '{print $2}' > SUBTARGET
        [ -s SUBTARGET ] && echo "SUBTARGET=$(cat SUBTARGET)" >> $GITHUB_ENV
        ls openwrt/bin/targets/*/*/ | awk -F/ '/sysupgrade/{print $NF}' >> BIN
        [ -s BIN ] && echo "BIN=$(cat BIN)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y-%m%d-%H%M")" >> $GITHUB_ENV
        echo "======================="
        echo "磁盘使用情况:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
        
    - name: 上传bin整包
      uses: actions/upload-artifact@v2
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 上传Packages
      uses: actions/upload-artifact@v2
      if: steps.compile.outputs.status == 'success' && !cancelled()
      with:
        name: packages
        path: openwrt/bin/targets/*/*/packages

    - name: 上传sysupgrade固件
      uses: actions/upload-artifact@v2
      if: steps.compile.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.FILE_DATE }}-${{ env.BIN }}
        path: openwrt/bin/targets/*/*/*squashfs-sysupgrade.bin

    - name: 筛选固件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        mkdir -p openwrt/firmware
        ls openwrt/bin/targets/*/*/
        cp openwrt/.config  openwrt/firmware/config.txt
        cp openwrt/bin/targets/*/*/*squashfs-sysupgrade.bin openwrt/firmware
        cd openwrt/firmware
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: 固件上传到奶牛快传
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: 固件上传到WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
